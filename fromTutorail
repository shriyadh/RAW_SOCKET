#!/usr/bin/env python3
# TOKEN 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
# My password Benzene66
# Sequence Number (raw): 300800002
# Acknowledgment number (raw): 51330
#Sequence Number: 310    (relative sequence number) (should be 51330)
#Acknowledgment number (raw): 300801362 (should be 300801422)


import ssl
import socket
import sys
from random import randint
from struct import *
from urllib.parse import urlparse
from TCP import TCP

# Sequence Number (raw): 462577461
# Acknowledgment number (raw): 2197703579
# length:

#Sequence Number (raw): 2197703579 (last ack)
#Acknowledgment number (raw): 462577462 (seq + 1)
class RawSocket():

    receiver_socket = None

    sender_socket = None

    remote_host = ""
    local_host  = ""
    remote_port = -9999
    local_port = -9999
    def __init__(self):
        self.sender_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
        self.receiver_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)
        self.local_port = randint(1001, 65535)

        self.local_IPAddress = ip


    def connect(self, host, port):

        self.remote_host = host
        self.remote_port = 80
        self.tcp_seq = 0


def parse_cmd_line():
    try:
        url = sys.argv[1]
    except:
        sys.exit("Please provide proper URL")

    return url


def get_file_name(url):
    # check if proper path is given, if not set default
    if url.endswith('/'):
        file = "index.html"
    else:
        # split to get file name
        file = url.split('/')[-1]

    return file


def make_request(url):
    return "GET " + url + " HTTP/1.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n" \
                          "Connection: close\r\n\r\n"


def start_download(url):
    # parse file name
    file = get_file_name(url)
    print(file)

    # get host and path
    eg = "https://david.choffnes.com/classes/cs5700f22/2MB.log"
    urlInformation = urlparse(url)
    print(urlInformation)

    host_name = urlInformation.netloc
    filePath = urlInformation.path
    print(filePath)

    # make request
    get_request = make_request(url)
    print(get_request)

    # add TCP header + IP header to create IP Datagram
    #sock = TCP()
    #sock.establish_handshake(host_name, 80)
    #sock.send_request(get_request)

# Sequence Number (raw): 2567054084 --- last ack i sent of handshake
#Acknowledgment number (raw): 69312002 -- lask acknowl number i sent

#  Sequence Number (raw): 2567054084 -- same as last ack
# Acknowledgment number (raw): 69312002 -- same acknowledgemnt number
###### the length of this packet was 2920 bytes

####what server sent
# Sequence Number (raw): 69312002
# Acknowledgment number (raw): 2567054347
# length was

# Sequence Number (raw): 69312002
# Acknowledgment number (raw): 2567054347
# length was 2920

# what i sentttt
# Sequence Number (raw): 2567054347 (the acknowledgement number they gave)
# Acknowledgment number (raw): 69314922 (their last sequence number + length of payload)

# what they sent
# Sequence Number (raw): 69314922
# Acknowledgment number (raw): 2567054347
# length was 1424

# what i sent
# Sequence Number (raw): 2567054347
# Acknowledgment number (raw): 69316346 (their last sequence number + length of payload)

    # open file and read
    # fOpen = open(file, 'wb+')

    # create socket
    # create_socket()


def main():
    # testing
    # parse the cmd line to get the url download link
    #url = parse_cmd_line()
   # print(url)


    #start_download(url)
    test = TCP()
    test.establish_handshake("david.choffnes.com", 80)





if __name__ == "__main__":
    main()